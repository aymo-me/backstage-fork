/*! For license information please see 955afe8c.c85ea016.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[737147],{519214:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var t=i(474848),c=i(28453);const s={id:"actions",title:"Actions (alpha)",sidebar_label:"Actions (alpha)",description:"Documentation for the Actions Service"},o=void 0,r={id:"backend-system/core-services/actions",title:"Actions (alpha)",description:"Documentation for the Actions Service",source:"@site/../docs/backend-system/core-services/actions.md",sourceDirName:"backend-system/core-services",slug:"/backend-system/core-services/actions",permalink:"/docs/next/backend-system/core-services/actions",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/backend-system/core-services/actions.md",tags:[],version:"current",frontMatter:{id:"actions",title:"Actions (alpha)",sidebar_label:"Actions (alpha)",description:"Documentation for the Actions Service"},sidebar:"docs",previous:{title:"Actions Registry (alpha)",permalink:"/docs/next/backend-system/core-services/actions-registry"},next:{title:"Introduction",permalink:"/docs/next/frontend-system/"}},a={},l=[{value:"Overview",id:"overview",level:2},{value:"How it Works",id:"how-it-works",level:2},{value:"Action Identification",id:"action-identification",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Using the Service",id:"using-the-service",level:2},{value:"Listing Available Actions",id:"listing-available-actions",level:3},{value:"Invoking an Action",id:"invoking-an-action",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Actions Service is a core service that provides a standardized interface for discovering and executing registered actions within Backstage backend plugins. This service acts as the consumer-facing API for actions that have been registered through the Actions Registry Service, allowing plugins to list available actions and invoke them with proper authentication and input validation."}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,t.jsxs)(n.p,{children:["The Actions Service implements the ",(0,t.jsx)(n.code,{children:"ActionsService"})," interface, which provides two primary methods:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"list()"}),":"]})," Retrieves all available actions with their complete metadata"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"invoke()"}),":"]})," Executes a specific action by ID with provided input data"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The service works in conjunction with the ",(0,t.jsx)(n.a,{href:"/docs/next/backend-system/core-services/actions-registry",children:"Actions Registry Service"}),", where actions are registered by plugins and then made available for discovery and execution through this service."]}),"\n",(0,t.jsx)(n.h2,{id:"action-identification",children:"Action Identification"}),"\n",(0,t.jsx)(n.p,{children:"Actions are identified using a unique ID that follows a specific format:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["All action IDs are prefixed with the plugin ID that registered them, following the pattern ",(0,t.jsx)(n.code,{children:"pluginId:actionName"})]}),"\n",(0,t.jsxs)(n.li,{children:["An action named ",(0,t.jsx)(n.code,{children:"fetch-user-info"})," registered by the ",(0,t.jsx)(n.code,{children:"catalog"})," plugin would have the ID ",(0,t.jsx)(n.code,{children:"catalog:fetch-user-info"})]}),"\n",(0,t.jsxs)(n.li,{children:["When using the ",(0,t.jsx)(n.code,{children:"actionsRegistryServiceMock"}),", the plugin ID prefix will be ",(0,t.jsx)(n.code,{children:"test:"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This naming convention ensures that action names are globally unique across all plugins and provides clear ownership identification."}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The Actions Service can be configured to control which plugins' actions are available:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"backend:\n  actions:\n    pluginSources:\n      - catalog\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-the-service",children:"Using the Service"}),"\n",(0,t.jsx)(n.h3,{id:"listing-available-actions",children:"Listing Available Actions"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of how to list all available actions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ActionsService } from '@backstage/backend-plugin-api';\n\nexport async function listAvailableActions(\n  actionsService: ActionsService,\n  credentials: BackstageCredentials,\n) {\n  try {\n    const { actions } = await actionsService.list({ credentials });\n\n    console.log(`Found ${actions.length} available actions:`);\n\n    actions.forEach(action => {\n      console.log(`- ${action.id}: ${action.title}`);\n      console.log(`  Description: ${action.description}`);\n      console.log(`  Attributes: ${JSON.stringify(action.attributes)}`);\n\n      if (action.schema.input) {\n        console.log(\n          `  Input Schema: ${JSON.stringify(action.schema.input, null, 2)}`,\n        );\n      }\n    });\n\n    return actions;\n  } catch (error) {\n    console.error('Failed to list actions:', error);\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"invoking-an-action",children:"Invoking an Action"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of how to execute a specific action:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ActionsService } from '@backstage/backend-plugin-api';\n\nexport async function executeAction(\n  actionsService: ActionsService,\n  actionId: string,\n  input: JsonObject,\n  credentials: BackstageCredentials,\n) {\n  try {\n    const { output } = await actionsService.invoke({\n      id: actionId,\n      input,\n      credentials,\n    });\n\n    console.log(`Action ${actionId} executed successfully`);\n    console.log('Output:', JSON.stringify(output, null, 2));\n\n    return output;\n  } catch (error) {\n    console.error(`Failed to execute action ${actionId}:`, error);\n    throw error;\n  }\n}\n\n// Example usage\nasync function fetchUserInfo(\n  actionsService: ActionsService,\n  credentials: BackstageCredentials,\n) {\n  const output = await executeAction(\n    actionsService,\n    'catalog:fetch-user-info', // Note: Action ID includes plugin prefix\n    {\n      userRef: 'user:default/john.doe',\n      includeGroups: true,\n    },\n    credentials,\n  );\n\n  return output;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.p,{children:["For comprehensive guidance on action design, naming conventions, and schema design, see the ",(0,t.jsx)(n.a,{href:"/docs/next/backend-system/core-services/actions-registry#best-practices",children:"Actions Registry Best Practices"})," documentation."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},221020:(e,n,i)=>{var t=i(296540),c=Symbol.for("react.element"),s=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,r=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,i){var t,s={},l=null,d=null;for(t in void 0!==i&&(l=""+i),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(d=n.ref),n)o.call(n,t)&&!a.hasOwnProperty(t)&&(s[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===s[t]&&(s[t]=n[t]);return{$$typeof:c,type:e,key:l,ref:d,props:s,_owner:r.current}}n.Fragment=s,n.jsx=l,n.jsxs=l},474848:(e,n,i)=>{e.exports=i(221020)},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(296540);const c={},s=t.createContext(c);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);